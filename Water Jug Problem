# prompt: water jug problem

def water_jug_problem(jug1_capacity, jug2_capacity, target_capacity):
  """Solves the water jug problem using BFS.

  Args:
    jug1_capacity: Capacity of jug 1.
    jug2_capacity: Capacity of jug 2.
    target_capacity: Target amount of water to measure.

  Returns:
    A list of tuples representing the steps to reach the target capacity, or
    None if it's not possible.
  """

  def get_neighbors(current_state):
    jug1, jug2 = current_state
    neighbors = []

    # Fill jug1 completely
    neighbors.append((jug1_capacity, jug2))

    # Fill jug2 completely
    neighbors.append((jug1, jug2_capacity))

    # Empty jug1
    neighbors.append((0, jug2))

    # Empty jug2
    neighbors.append((jug1, 0))

    # Pour water from jug1 to jug2 until jug2 is full or jug1 is empty
    pour_amount = min(jug1, jug2_capacity - jug2)
    neighbors.append((jug1 - pour_amount, jug2 + pour_amount))

    # Pour water from jug2 to jug1 until jug1 is full or jug2 is empty
    pour_amount = min(jug2, jug1_capacity - jug1)
    neighbors.append((jug1 + pour_amount, jug2 - pour_amount))

    return neighbors


  queue = [(0, 0)]
  visited = set()
  parent = {}  # Store parent for path reconstruction

  while queue:
    current_state = queue.pop(0)
    if current_state in visited:
      continue
    visited.add(current_state)

    if current_state[0] == target_capacity or current_state[1] == target_capacity:
      path = []
      curr = current_state
      while curr in parent:
        path.insert(0, curr)
        curr = parent[curr]
      path.insert(0, (0, 0))
      return path

    for neighbor in get_neighbors(current_state):
      if neighbor not in visited:
        queue.append(neighbor)
        parent[neighbor] = current_state

  return None  # No solution found


if __name__ == "__main__":
  jug1_capacity = 4
  jug2_capacity = 3
  target_capacity = 2

  solution = water_jug_problem(jug1_capacity, jug2_capacity, target_capacity)

  if solution:
    print("Solution found:")
    for i, state in enumerate(solution):
      print(f"Step {i+1}: Jug 1 = {state[0]}, Jug 2 = {state[1]}")
  else:
    print("No solution exists.")
