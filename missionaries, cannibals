def is_valid(missionaries, cannibals):
    return (missionaries >= cannibals or missionaries == 0) and (3 - missionaries >= 3 - cannibals or 3 - missionaries == 0)
def solve():
    # Start with all 3 missionaries, 3 cannibals on the left side
    start = (3, 3, 1)  # (missionaries_left, cannibals_left, boat_on_left)
    goal = (0, 0, 0)   # (missionaries_left, cannibals_left, boat_on_right)
    queue = [(start, [])]  # queue of states and paths
    visited = set([start])
     while queue:
        (missionaries, cannibals, boat), path = queue.pop(0)
        if (missionaries, cannibals, boat) == goal:
            return path + [(missionaries, cannibals, boat)]
        moves = [(1, 0), (2, 0), (1, 1), (0, 1), (0, 2)]
        for m, c in moves:
            if boat == 1:  # Boat on left
                new_state = (missionaries - m, cannibals - c, 0)
            else: 
                new_state = (missionaries + m, cannibals + c, 1)
            if 0 <= new_state[0] <= 3 and 0 <= new_state[1] <= 3 and is_valid(new_state[0], new_state[1]) and new_state not in visited:
                visited.add(new_state)
                queue.append((new_state, path + [(missionaries, cannibals, boat)]))
    
    return None

def main():
    solution = solve()
    if solution:
        print("Solution found:")
        for step in solution:
            print(step)
    else:
        print("No solution exists")

if __name__ == "__main__":
    main()
