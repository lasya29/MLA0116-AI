import math

# Function to print the board
def print_board(board):
    for row in board:
        print(row)

# Function to check if a player has won
def check_winner(board, player):
    # Check rows, columns, and diagonals
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]],
    ]
    return [player, player, player] in win_conditions

# Function to check if the board is full
def is_board_full(board):
    for row in board:
        if '' in row:
            return False
    return True

# Minimax function
def minimax(board, depth, is_maximizing):
    # Base case: check for terminal state (win, lose, draw)
    if check_winner(board, 'O'):
        return 1
    if check_winner(board, 'X'):
        return -1
    if is_board_full(board):
        return 0

    # Maximizing player (AI - 'O')
    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ''
                    best_score = max(score, best_score)
        return best_score
    # Minimizing player (Human - 'X')
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ''
                    best_score = min(score, best_score)
        return best_score

# Function to find the best move for the AI
def find_best_move(board):
    best_move = None
    best_score = -math.inf
    for i in range(3):
        for j in range(3):
            if board[i][j] == '':
                board[i][j] = 'O'  # AI plays as 'O'
                move_score = minimax(board, 0, False)
                board[i][j] = ''  # Undo the move
                if move_score > best_score:
                    best_score = move_score
                    best_move = (i, j)
    return best_move

# Function to play Tic-Tac-Toe
def play_tic_tac_toe():
    board = [['' for _ in range(3)] for _ in range(3)]
    human_turn = True  # Human plays first as 'X'
    
    while True:
        print_board(board)
        if check_winner(board, 'X'):
            print("Human wins!")
            break
        if check_winner(board, 'O'):
            print("AI wins!")
            break
        if is_board_full(board):
            print("It's a draw!")
            break
        
        if human_turn:
            # Human turn (X)
            print("Human's turn (X):")
            row = int(input("Enter row (0-2): "))
            col = int(input("Enter col (0-2): "))
            if board[row][col] == '':
                board[row][col] = 'X'
                human_turn = False
        else:
            # AI turn (O)
            print("AI's turn (O):")
            move = find_best_move(board)
            board[move[0]][move[1]] = 'O'
            human_turn = True

# Start the game
play_tic_tac_toe()
