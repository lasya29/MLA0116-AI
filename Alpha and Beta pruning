import math

# Initialize board
def initialize_board():
    return [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]

# Check if any player has won
def check_winner(board):
    # Rows, columns, and diagonals check
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != '-':
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != '-':
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2] != '-':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != '-':
        return board[0][2]
    return None

# Check if the board is full
def is_full(board):
    for row in board:
        if '-' in row:
            return False
    return True

# Minimax function with Alpha-Beta pruning
def minimax_alpha_beta(board, depth, is_maximizing, alpha, beta):
    winner = check_winner(board)
    if winner == 'X':
        return 1
    if winner == 'O':
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '-':
                    board[i][j] = 'X'
                    score = minimax_alpha_beta(board, depth + 1, False, alpha, beta)
                    board[i][j] = '-'
                    best_score = max(score, best_score)
                    alpha = max(alpha, score)
                    if beta <= alpha:
                        break  # Beta cut-off
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '-':
                    board[i][j] = 'O'
                    score = minimax_alpha_beta(board, depth + 1, True, alpha, beta)
                    board[i][j] = '-'
                    best_score = min(score, best_score)
                    beta = min(beta, score)
                    if beta <= alpha:
                        break  # Alpha cut-off
        return best_score

# Find the best move for the maximizing player
def best_move_alpha_beta(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == '-':
                board[i][j] = 'X'
                score = minimax_alpha_beta(board, 0, False, -math.inf, math.inf)
                board[i][j] = '-'
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Print the board
def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

# Example game
board = initialize_board()
print("Initial Board:")
print_board(board)

# Sample moves
board[0][0] = 'X'
board[1][1] = 'O'
print("Board after two moves:")
print_board(board)

# Find the best move for 'X' with Alpha-Beta pruning
move = best_move_alpha_beta(board)
if move:
    print(f"Best move for 'X': {move}")
    board[move[0]][move[1]] = 'X'

print("Board after best move for 'X':")
print_board(board)
